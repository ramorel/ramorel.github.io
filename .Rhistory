school_dat <-
get_education_data(level = "schools",
source = "ccd",
topic = "directory",
filters = list(year = seq(from = 2000, to = 2016, by = 2))) %>%
na_if(., -2) %>%
filter(
fips <= 59,
!fips %in% c(2, 15)
) %>%
as_tibble()
school_dat <-
get_education_data(level = "schools",
source = "ccd",
topic = "directory",
filters = list(year = seq(from = 2000, to = 2016, by = 2))) %>%
filter(
fips <= 59,
!fips %in% c(2, 15)
) %>%
as_tibble()
school_dat <-
get_education_data(level = "schools",
source = "ccd",
topic = "directory",
filters = list(year = seq(from = 2000, to = 2016, by = 2)))
school_dat <-
get_education_data(level = "schools",
source = "ccd",
topic = "directory",
filters = list(year = seq(from = 2000, to = 2016, by = 2)))
seq(from = 2000, to = 2016, by = 2)
school_dat <-
get_education_data(level = "schools",
source = "ccd",
topic = "directory",
filters = list(year = c(2000, 2002, 2004, 2006, 2008, 2010,
2012, 2014, 2016)))
ccd_school_dir <-
get_education_data(level = "schools",
source = "ccd",
topic = "directory",
filters = list(year = 2000))
ccd_school_dir %>% glimpse()
school_dat <-
get_education_data(level = "schools",
source = "ccd",
topic = "directory",
filters = list(year = seq(from = 2000, to = 2016, by = 2)))
library(tidyverse)
library(educationdata)
library(dbplyr)
ccd_dir <- "/Volumes/the safe box/CCD_2000_2016/ccd_2000-2016.sqlite"
ccd_db <- src_sqlite(ccd_dir, create = TRUE)
ccd_district_dir <-
get_education_data(level = "school-districts",
source = "ccd",
topic = "directory",
filters = list(year = 2000))
copy_to(ccd_db, ccd_district_dir)
rm(ccd_district_dir)
install.packages("educationdata")
install.packages("educationdata")
remotes::install_github('UrbanInstitute/education-data-package-r')
library(educationdata)
library(tidyverse)
library(educationdata)
library(dbplyr)
ccd_dir <- "/Volumes/the safe box/CCD_2000_2016/ccd_2000-2016.sqlite"
ccd_db <- src_sqlite(ccd_dir, create = TRUE)
ccd_district_dir <-
get_education_data(level = "school-districts",
source = "ccd",
topic = "directory",
filters = list(year = 2000))
library(gganimate)
#> Loading required package: ggplot2
# We'll start with a static plot
p <- ggplot(iris, aes(x = Petal.Width, y = Petal.Length)) +
geom_point()
plot(p)
anim <- p +
transition_states(Species,
transition_length = 2,
state_length = 1)
anim
knitr::opts_chunk$set(collapse = TRUE, warning = FALSE, message = FALSE, dpi = 340)
library(tidyverse)
library(tidycensus)
mtcars
sumary(lm(mpg ~ ., data = mtcars))
summary(lm(mpg ~ ., data = mtcars))
repl_python()
library(reticulate)
repl_python()
mt
repl_python()
import statsmodels.formula.api as sm
import pandas as pd
from sklearn.linear_model import LinearRegression
lm = LinearRegression()
mt = pd.DataFrame(r.mtcars)
mt
repl_python()
import statsmodels.formula.api as sm
?repl_python()
repl_python()
lm = LinearRegression()
mt = pd.DataFrame(r.mtcars)
mt
repl_python()
summary(lm(mpg ~ cyl + disp, data = mtcars))
repl_python()
df = data.frame("stress actions" = c(0.0 , -0.2 , -0.3 ,-0.4),
"Passif" = c(0 , -0.017279 , -0.025495 , -0.030506))
df <- data.frame("stress actions" = c(0.0 , -0.2 , -0.3 ,-0.4),
"Passif" = c(0 , -0.017279 , -0.025495 , -0.030506))
df
df <- data.frame("stress_actions" = c(0.0 , -0.2 , -0.3 ,-0.4),
"Passif" = c(0 , -0.017279 , -0.025495 , -0.030506))
df <- df %>%  mutate(stress_actions2 = stress_action^2,
stress_actions3 = stress_action^3)
df
df %>%  mutate(stress_actions2 = stress_actions^2,
stress_actions3 = stress_actions^3)
df <- data.frame("stress_actions" = c(0.0 , -0.2 , -0.3 ,-0.4),
"Passif" = c(0 , -0.017279 , -0.025495 , -0.030506))
df <- df %>%  mutate(stress_actions2 = stress_actions^2,
stress_actions3 = stress_actions^3)
sumary(lm(Passif~., data = df))
summary(lm(Passif~., data = df))
df
summary(lm(Passif~stress_actions, data = df))
summary(lm(Passif~stress_actions2, data = df))
summary(lm(Passif~stress_actions + stress_actions2, data = df))
df <- data.frame("Passif" = c(0 , -0.017279 , -0.025495 , -0.030506),
"stress_actions" = c(0.0 , -0.2 , -0.3 ,-0.4))
df <- df %>%  mutate(stress_actions2 = stress_actions^2,
stress_actions3 = stress_actions^3)
summary(lm(Passif~., data = df))
summary(glm(Passif~., data = df, family = "gaussian"))
repl_python()
round(-1.735e-1)
round(-1.735e-1, 10)
round(-1.735e-1, 5)
repl_python()
round(1.731e-17, 10)
round(1.731e-17)
round(1.731e-17, 20)
round(1.731e-17, 30)
round(-1.735e-18)
round(-1.735e-18, 10)
round(summary(lm(Passif~stress_actions+I(stress_actions^2)+I(stress_actions^3), data = df)), 10)
summary(lm(Passif~stress_actions+I(stress_actions^2)+I(stress_actions^3), data = df))
library(tidyverse)
library(tidycensus)
library(gganimate)
library(sf)
options(tigris_use_cache = TRUE)
options(tigris_class = "sf")
ny_counties <-
get_acs(
state = "NY",
geography = "county",
variables = "B19013_001",
geometry = TRUE
) %>%
mutate(NAME = toupper(str_remove(NAME, " County, New York"))) %>%
mutate(NAME = str_replace(NAME, "ST\\.", "SAINT"))
ny_counties <-
get_acs(
state = "NY",
geography = "county",
variables = "B19013_001",
geometry = TRUE
) %>%
mutate(NAME = toupper(str_remove(NAME, " County, New York"))) %>%
mutate(NAME = str_replace(NAME, "ST\\.", "SAINT"))
ny_counties <-
get_acs(
state = "IL",
geography = "county",
variables = "B19013_001",
geometry = TRUE
)
ny_counties <-
get_acs(
state = "NY",
geography = "county",
variables = "B19013_001",
geometry = TRUE
) %>%
mutate(NAME = toupper(str_remove(NAME, " County, New York"))) %>%
mutate(NAME = str_replace(NAME, "ST\\.", "SAINT"))
knitr::opts_chunk$set(echo = TRUE)
library(sandwich)
library(lmtest)
# Fit the model
fit <- lm(mpg ~ ., data = mtcars)
# Summarize the model with reg SEs
summary(fit)
# Summarize the model with robust SEs
coeftest(mod1, vcov = vcovHC(mod1))
library(sandwich)
library(lmtest)
# Fit the model
fit <- lm(mpg ~ ., data = mtcars)
# Summarize the model with reg SEs
summary(fit)
# Summarize the model with robust SEs
coeftest(fit, vcov = vcovHC(fit))
library(sandwich)
library(lmtest)
# Fit the model
fit <- lm(mpg ~ wt + cyl, data = mtcars)
# Summarize the model with reg SEs
summary(fit)
# Summarize the model with robust SEs
coeftest(fit, vcov = vcovHC(fit))
mtcars
mtcars %>% haven::write_dta("ex.dta")
library(tidyverse)
mtcars %>% haven::write_dta("ex.dta")
dplyr::storms
gapminder::gapminder
library(sandwich)
library(lmtest)
gapminder <- gapminder::gapminder
# Fit the model
fit <- lm(lifeExp ~ pop + gdpPercap, data = gapminder)
# Summarize the model with reg SEs
summary(fit)
# Summarize the model with robust SEs
coeftest(fit, vcov = vcovHC(fit))
occupationalStatus
UKDriverDeaths
Seatbelts
library(sandwich)
library(lmtest)
# Fit the model
fit <- lm(DriversKilled ~ kms + PetrolPrice, data = Seatbelts)
# Summarize the model with reg SEs
summary(fit)
# Summarize the model with robust SEs
coeftest(fit, vcov = vcovHC(fit))
USAccDeaths
base::USAccDeaths
stats::USAccDeaths
datasets::USJudgeRatings
datasets::USArrests
library(sandwich)
library(lmtest)
# Fit the model
fit <- lm(mpg ~ wt + cyl, data = mtcars)
# Summarize the model with reg SEs
summary(fit)
# Summarize the model with robust SEs
coeftest(fit, vcov = vcovHC(fit))
coeftest(fit, vcov = vcovHC(fit, type = "HC1"))
fit <- lm(mpg ~ wt + cyl, data = mtcars, family = gaussian(link = "identity"))
coeftest(fit, vcov = vcovHC(fit, type = "HC1"))
fit <- glm(mpg ~ wt + cyl, data = mtcars, family = gaussian(link = "identity"))
coeftest(fit, vcov = vcovHC(fit, type = "HC1"))
# As before
coeftest(fit, vcov = vcovHC(fit, type = "HC1"))
# This is the same
coeftest(fit, vcov = robust(fit, stata = FALSE))
robust <- function(model, stata = TRUE){
x <- model.matrix(model)
n <- nrow(x)
k <- length(coef(model))
if (stata) {
df <- n / (n - 1)
} else {
df <- n / (n - k)
}
u <- model$residuals
bread <- solve(crossprod(x))
meat <- t(x) %*% (df * diag(u^2)) %*% x
est <- bread %*% meat %*% bread
return(est)
}
# As before
coeftest(fit, vcov = vcovHC(fit, type = "HC1"))
# This is the same
coeftest(fit, vcov = robust(fit, stata = FALSE))
# Now for the Stata-like version
coeftest(fit, vcov = robust(fit, stata = TRUE))
gapminder
gapminder %>% filter(year == 1992)
dat <- gapminder %>% filter(year == 1992)
dat %>% haven::write_dta("ex2.dta")
dat <- gapminder %>% filter(year == 1992)
fit <- glm(lifeExp ~ pop + gdpPercap, data = dat, family = gaussian(link = "identity"))
coeftest(fit, vcov = robust(fit, stata = TRUE))
dat <- gapminder %>% filter(year == 1992)
fit <- glm(lifeExp ~ pop + gdpPercap, data = dat, family = gaussian(link = "identity"))
coeftest(fit, vcov = robust(fit, stata = FALSE))
gapminder$year %>% unique()
dat <- gapminder %>% filter(year == 2007)
dat <- gapminder %>% filter(year == 1992)
fit <- glm(lifeExp ~ pop + gdpPercap, data = dat, family = gaussian(link = "identity"))
coeftest(fit, vcov = robust(fit, stata = FALSE))
fit <- glm(lifeExp ~ pop + gdpPercap, data = dat, family = gaussian(link = "identity"))
coeftest(fit, vcov = vcovHC(fit, type = "HC1"))
coeftest(fit, vcov = robust(fit, stata = FALSE))
x <- model.matrix(fit)
n <- nrow(x)
k <- length(coef(fit))
df <- n / (n - k)
u <- fit$residuals
bread <- solve(crossprod(x))
meat <- t(x) %*% (df * diag(u^2)) %*% x
est <- bread %*% meat %*% bread
solve(crossprod(x))
crossprod(x)
datasets::Seatbelts
dat <- gapminder %>% filter(year == 1992)
fit <- glm(DriversKilled ~ kms + PetrolPrice, data = Seatbelts, family = gaussian(link = "identity"))
coeftest(fit, vcov = robust(fit, stata = FALSE))
dat <- gapminder %>% filter(year == 1992)
fit <- glm(DriversKilled ~ kms + PetrolPrice, data = Seatbelts, family = gaussian(link = "identity"))
coeftest(fit, vcov = robust(fit, stata = TRUE))
Seatbelts %>% haven::write_dta("ex2.dta")
Seatbelts %>% as.data.frame() %>% haven::write_dta("ex2.dta")
options(digits=5)
fit <- glm(DriversKilled ~ kms + PetrolPrice, data = Seatbelts, family = gaussian(link = "identity"))
coeftest(fit, vcov = robust(fit, stata = TRUE))
options(digits=10)
fit <- glm(DriversKilled ~ kms + PetrolPrice, data = Seatbelts, family = gaussian(link = "identity"))
coeftest(fit, vcov = robust(fit, stata = TRUE))
options(digits=3)
fit <- glm(DriversKilled ~ kms + PetrolPrice, data = Seatbelts, family = gaussian(link = "identity"))
coeftest(fit, vcov = robust(fit, stata = TRUE))
options("scipen" = 10, "digits" = 5)
fit <- glm(DriversKilled ~ kms + PetrolPrice, data = Seatbelts, family = gaussian(link = "identity"))
coeftest(fit, vcov = robust(fit, stata = TRUE))
options("scipen" = 10, "digits" = 5)
fit <- glm(DriversKilled ~ kms + PetrolPrice, data = Seatbelts, family = gaussian(link = "identity"))
coeftest(fit, vcov = robust(fit, stata = FALSE))
Seatbelts
options("scipen" = 10, "digits" = 5)
fit <- glm(DriversKilled ~ ., data = Seatbelts, family = gaussian(link = "identity"))
coeftest(fit, vcov = robust(fit, stata = FALSE))
?plm::plm()
read_csv("files/train.csv")
tmp <- read_csv("files/train.csv")
tmp %>% haven::write_dta("ex2.dta")
tmp %>% clean_names() %>%  haven::write_dta("ex2.dta")
tmp %>% janitor::clean_names() %>%  haven::write_dta("ex2.dta")
tmp <- read_csv("files/train.csv") %>% janitor::clean_names()
options("scipen" = 10, "digits" = 5)
fit <- glm(sale_price ~ overall_qual + gr_liv_area, data = tmp , family = gaussian(link = "identity"))
coeftest(fit, vcov = robust(fit, stata = FALSE))
options("scipen" = 10, "digits" = 5)
fit <- glm(log(sale_price) ~ overall_qual + gr_liv_area, data = tmp , family = gaussian(link = "identity"))
coeftest(fit, vcov = robust(fit, stata = FALSE))
tmp <- read_csv("files/train.csv") %>% janitor::clean_names() %>% mutate(log_price = log(sale_price))
tmp %>% janitor::clean_names() %>%  haven::write_dta("ex2.dta")
tmp %>% janitor::clean_names() %>% mutate(log_price = log(sale_price)) %>%  haven::write_dta("ex2.dta")
library(tidyverse)
library(educationdata)
library(dbplyr)
ccd_district_enroll <-
get_education_data(level = "school-districts",
source = "ccd",
topic = "enrollment",
filters = list(year = 2001:2016,
grade = 99),
by = list("race"),
add_labels = TRUE)
exp(-3.6)
exp(-3.6)/(1+exp(-3.6))
exp(-3.28)/(1+exp(-3.28))
exp(-0.39)/(1+exp(-0.29))
exp(-0.29)/(1+exp(-0.29))
exp(-0.29)
exp(-0.27)/(1+exp(-0.27))
exp(4.1)/(1+exp(4.1))
exp(-5.7127)/(1+exp(-5.7127))
exp(-3.6 + 4.1)/(1+exp(-3.6 +4.1))
exp(-3.6 + 0.34)/(1+exp(-3.6 +0.34))
exp(4.1)/(1+exp(4.1))
library(stastnet)
library(statnet)
data('sampson')
y <- gvectorize(as.matrix(samplike),  censor.as.na= T)
y
as.matrix(samplike)
y
?gvectorize(as.matrix(samplike),  censor.as.na= T)
gvectorize
as.sociomatrix.sna(samplike)
mats <- samplike
mats <- as.sociomatrix.sna(mats)
m <- 1
n <- dim(mats)[1]
o <- dim(mats)[2]
d <- array(dim = c(1, n, o))
d[1, , ] <- mats
d
m
o
apply(d, 1, as.vector)
d <- diag.remove(d)
apply(d, 1, as.vector)
as.matrix(samplike)
colname(as.matrix(samplike))
colnamesa(as.matrix(samplike))
colnames(as.matrix(samplike))
combinat::permn(c(colnames(as.matrix(samplike)), rownames(as.matrix(samplike)))
combinat::permn(c(colnames(as.matrix(samplike)), rownames(as.matrix(samplike))))
install.packages("combinat")
combinat::permn(c(colnames(as.matrix(samplike)), rownames(as.matrix(samplike))))
?combinat::permn(c(colnames(as.matrix(samplike)), rownames(as.matrix(samplike))))
combn(letters[1:4], 2)
combinat::combn(c(colnames(as.matrix(samplike)), rownames(as.matrix(samplike))), 2)
combinat::combn(c(colnames(as.matrix(samplike)), rownames(as.matrix(samplike))), 2) %>% t()
combinat::combn(c(colnames(as.matrix(samplike)), rownames(as.matrix(samplike))), 1) %>% t()
combinat::combn(c(colnames(as.matrix(samplike))), 2) %>% t()
combinat::permn(c(colnames(as.matrix(samplike)), rownames(as.matrix(samplike))), 2)
y
combinat::combn(c(colnames(as.matrix(samplike))), 2) %>% t()
combinat::combn(c(colnames(as.matrix(samplike)), rownames(as.matrix(samplike))), 1) %>% t()
combinat::combn(c(colnames(as.matrix(samplike)), rownames(as.matrix(samplike))), 2) %>% t()
expand.grid(colnames(as.matrix(samplike)) rownames(as.matrix(samplike)))
expand.grid(colnames(as.matrix(samplike)), rownames(as.matrix(samplike)))
cbind(expand.grid(colnames(as.matrix(samplike)), rownames(as.matrix(samplike))), y)
dat <- cbind(expand.grid(colnames(as.matrix(samplike)), rownames(as.matrix(samplike))), y) %>% setNames(c("from", "to", "val")
dat <- cbind(expand.grid(colnames(as.matrix(samplike)), rownames(as.matrix(samplike))), y) %>% setNames(c("from", "to", "val"))
dat
dat %>% mutate(fromto = paste(from, to, sep = "-"))
dat %>% mutate(fromto = paste(from, to, sep = "-"), tofrom = paste(to, from, sep = "-"))
mutuality
dyad.census
as.edgelist.sna(dat)
m <- as.edgelist.sna(dat)
as.edgelist.sna(dat)
dyad.census
m[m[, 1] != m[, 2], , drop = FALSE]
as.edgelist.sna(dat)%>% mutate(fromto = paste(from, to, sep = "-"), tofrom = paste(to, from, sep = "-"))
as.edgelist.sna(dat)%>% mutate(fromto = paste(from, to, sep = "-"), tofrom = paste(to, from, sep = "-"), row = row_number())
as.edgelist.sna(dat)%>% mutate(fromto = paste(from, to, sep = "-"), tofrom = paste(to, from, sep = "-"), row = row_number()) %>% filter(val == 1)
as.edgelist.sna(dat)%>% mutate(fromto = paste(from, to, sep = "-"), tofrom = paste(from, to, sep = "-"), row = row_number()) %>% filter(val == 1)
as.edgelist.sna(dat)%>% mutate(fromto = paste(from, to, sep = "-"), tofrom = paste(to, from, sep = "-"), row = row_number()) %>% filter(val == 1)
as.matrix(samplike)
dat %>% mutate(fromto = paste(from, to, sep = "-"), tofrom = paste(to, from, sep = "-"))
dat %>% mutate(fromto = paste(from, to, sep = "-"), tofrom = paste(to, from, sep = "-"), row = row_number())
dat %>% mutate(fromto = paste(from, to, sep = "-"), tofrom = paste(to, from, sep = "-"), row = row_number()) %>% filter(val == 1)
tmp <- as.edgelist.sna(dat)%>% mutate(fromto = paste(from, to, sep = "-"), tofrom = paste(to, from, sep = "-"), row = row_number()) %>% filter(val == 1)
tmp
which(tmp$fromto %in% tmp$tofrom)
length(which(tmp$fromto %in% tmp$tofrom))
mutuality(samplike)
samplike
length(which(tmp$fromto %in% tmp$tofrom))/2
dat <- as.edgelist.sna(dat)%>% mutate(fromto = paste(from, to, sep = "-"), tofrom = paste(to, from, sep = "-"), row = row_number())
dat %>% mutate(mutual_tie = ifelse(row %in% which(tmp$fromto %in% tmp$tofrom), 1, 0))
dat %>% mutate(mutual_tie = ifelse(row %in% which(tmp$fromto %in% tmp$tofrom), 1, 0)) %>% select(val, mutual_tie)
dat <- dat %>% mutate(mutual_tie = ifelse(row %in% which(tmp$fromto %in% tmp$tofrom), 1, 0)) %>% select(val, mutual_tie)
summary(glm(val ~ mutual_tie, data = dat, family = "binomial"))
summary(glm(val ~ 1 + mutual_tie, data = dat, family = "binomial"))
?ergm(edge ~)
?ergm
ergm(samplike ~ edges + mutual)
summary(ergm(samplike ~ edges + mutual))
summary(glm(val ~ 1 + mutual_tie, data = dat, family = "binomial"))
summary(glm(val ~ mutual_tie, data = dat, family = "binomial"))
samplike %v% "group"\
samplike %v% "group"
network::get.edges(samplike)
network::network.edgelist(samplike)
?network::network.edgelist(samplike)
ergm
library(tigris)
library(ggplot2)
library(sf)
library(gganimate)
library(transformr)
set.seed(42)
options(tigris_class = "sf")
travis <- block_groups(48, c(453))
travis1 <- travis
travis2 <- travis
travis1$date <- as.Date("2020/02/01")
travis1$count <- runif(580, 0, 1000)
travis2$date <- as.Date("2020/03/01")
travis2$count <- runif(580, 0, 1000)
travisJoined <- rbind_tigris(travis1, travis2)
ggplot(data = travisJoined) +
geom_sf(aes(geometry = geometry)) +
geom_sf(aes(fill = count)) +
theme_bw() +
scale_fill_distiller(palette = "Spectral") +
transition_states(date,
transition_length = 3,
state_length = 10)
ggplot(data = travis2) +
geom_sf(aes(geometry = geometry)) +
geom_sf(aes(fill = proportionLeftHome)) +
theme_bw() +
scale_fill_distiller(palette = "Spectral") +
transition_states(date,
transition_length = 3,
state_length = 10) +
ease_aes('linear')
travis2 <- rbind_tigris(geo_join(travis, travisSD[[1]], "GEOID", "origin_census_block_group"),
geo_join(travis, travisSD[[58]], "GEOID", "origin_census_block_group")
travis2 <- rbind_tigris(geo_join(travis, travisSD[[1]], "GEOID", "origin_census_block_group"),
geo_join(travis, travisSD[[58]], "GEOID", "origin_census_block_group")
travis2 <- rbind_tigris(geo_join(travis, travisSD[[1]], "GEOID", "origin_census_block_group"),
geo_join(travis, travisSD[[58]], "GEOID", "origin_census_block_group"))
